Nonterminals useless in grammar

    variable_declaration
    dnext_int
    dnext_double
    dnext_char
    dnext_bool
    dnext_string


Rules useless in grammar

  136 variable_declaration: visibility INT VAR_NAME dnext_int
  137                     | visibility DOUBLE VAR_NAME dnext_double
  138                     | visibility CHAR VAR_NAME dnext_char
  139                     | visibility BOOLEAN VAR_NAME dnext_bool
  140                     | visibility STRING VAR_NAME dnext_string

  141 dnext_int: ε
  142          | COMMA VAR_NAME dnext_int

  143 dnext_double: ε
  144             | COMMA VAR_NAME dnext_double

  145 dnext_char: ε
  146           | COMMA VAR_NAME dnext_char

  147 dnext_bool: ε
  148           | COMMA VAR_NAME dnext_bool

  149 dnext_string: ε
  150             | COMMA VAR_NAME dnext_string


State 8 conflicts: 2 shift/reduce
State 9 conflicts: 5 reduce/reduce
State 10 conflicts: 5 reduce/reduce
State 13 conflicts: 2 shift/reduce
State 15 conflicts: 2 shift/reduce
State 21 conflicts: 2 shift/reduce
State 69 conflicts: 1 shift/reduce
State 162 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | class_identifier program

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    4 class_body: ε
    5           | functions class_body
    6           | class_members class_body
    7           | class_identifier class_body

    8 class_members: visibility variable_initialization SEMICOLON
    9              | variable_assignment SEMICOLON
   10              | member_access SEMICOLON
   11              | class_instance SEMICOLON

   12 VAR_NAME: IDENT
   13         | CLASS_NAME

   14 variable_initialization: visibility INT int_init next_int
   15                        | visibility DOUBLE double_init next_double
   16                        | visibility CHAR char_init next_char
   17                        | visibility BOOLEAN bool_init next_bool
   18                        | visibility STRING string_init next_string

   19 next_int: ε
   20         | COMMA int_init next_int

   21 next_double: ε
   22            | COMMA double_init next_double

   23 next_char: ε
   24          | COMMA char_init next_char

   25 next_bool: ε
   26          | COMMA bool_init next_bool

   27 next_string: ε
   28            | COMMA string_init next_string

   29 int_init: VAR_NAME EQUAL_SIGN INT_VALUE

   30 double_init: VAR_NAME EQUAL_SIGN DOUBLE_VALUE

   31 char_init: VAR_NAME EQUAL_SIGN CHAR_VALUE

   32 bool_init: VAR_NAME EQUAL_SIGN BOOLEAN_VALUE

   33 string_init: VAR_NAME EQUAL_SIGN STRING_VALUE

   34 variable_assignment: VAR_NAME EQUAL_SIGN expression

   35 expression: expression PLUS term
   36           | expression MINUS term
   37           | term

   38 term: term MULTIPLY par
   39     | term DIVIDE par
   40     | par

   41 par: BRACKET_LEFT expression BRACKET_RIGHT
   42    | id

   43 id: variable_value
   44   | VAR_NAME
   45   | BRACKET_LEFT id BRACKET_RIGHT

   46 visibility: PUBLIC
   47           | PRIVATE
   48           | ε

   49 variable_value: INT_VALUE
   50               | CHAR_VALUE
   51               | DOUBLE_VALUE
   52               | BOOLEAN_VALUE
   53               | STRING_VALUE

   54 variable_type: INT
   55              | DOUBLE
   56              | CHAR
   57              | BOOLEAN
   58              | STRING

   59 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

   60 member_access: VAR_NAME DOT VAR_NAME parenthesis

   61 parenthesis: ε
   62            | BRACKET_LEFT BRACKET_RIGHT

   63 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT
   64          | function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

   65 function_visibility: PRIVATE
   66                    | PUBLIC

   67 arguments: ε
   68          | parameters

   69 parameters: variable_type VAR_NAME arguments_end

   70 arguments_end: ε
   71              | COMMA parameters

   72 inside_void_function: inside_brackets
   73                     | inside_brackets RETURN SEMICOLON

   74 inside_function: inside_brackets RETURN VAR_NAME SEMICOLON
   75                | inside_brackets RETURN variable_value SEMICOLON

   76 inside_brackets: ε
   77                | loops_n_condition inside_brackets
   78                | variable_assignment SEMICOLON

   79 loops_n_condition: for_statement
   80                  | switch
   81                  | do_while
   82                  | if
   83                  | variable_initialization SEMICOLON
   84                  | variable_assignment SEMICOLON
   85                  | class_instance SEMICOLON
   86                  | member_access SEMICOLON

   87 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

   88 for_condition: for_variable SEMICOLON for_comparison SEMICOLON for_step

   89 for_variable: ε
   90             | variable_type VAR_NAME EQUAL_SIGN variable_value

   91 for_comparison: ε
   92               | VAR_NAME CONDITION_SYMBOL comparison_value for_bool_operator

   93 comparison_value: INT_VALUE
   94                 | DOUBLE_VALUE
   95                 | CHAR_VALUE
   96                 | BOOLEAN_VALUE
   97                 | VAR_NAME

   98 for_bool_operator: ε
   99                  | BOOL_OP for_comparison

  100 for_step: ε
  101         | VAR_NAME step

  102 step: INCREAMENT_DECREAMENT
  103     | LOOP_STEP step_value

  104 step_value: INT_VALUE
  105           | DOUBLE_VALUE

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

  107 do_condition: operand CONDITION_SYMBOL operand do_bool_operator
  108             | BOOLEAN_VALUE
  109             | VAR_NAME

  110 do_bool_operator: ε
  111                 | BOOL_OP do_condition

  112 operand: VAR_NAME
  113        | INT_VALUE
  114        | DOUBLE_VALUE
  115        | CHAR_VALUE
  116        | BOOLEAN_VALUE

  117 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

  118 case: CASE switch_value COLON switch_content case
  119     | ε

  120 switch_value: INT_VALUE
  121             | CHAR_VALUE

  122 switch_content: ε
  123               | BREAK SEMICOLON

  124 default: DEFAULT COLON switch_content
  125        | ε

  126 if: IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

  127 else_if: ε
  128        | ELSE IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if
  129        | else

  130 else: ELSE CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

  131 if_condition: operand CONDITION_SYMBOL operand if_bool_operator
  132             | BOOLEAN_VALUE
  133             | VAR_NAME

  134 if_bool_operator: ε
  135                 | BOOL_OP if_condition


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CURLY_BRACKET_LEFT (258) 3 63 64 87 106 117 126 128 130
    CURLY_BRACKET_RIGHT (259) 3 63 64 87 106 117 126 128 130
    BRACKET_LEFT (260) 41 45 59 62 63 64 87 106 117 126 128
    BRACKET_RIGHT (261) 41 45 59 62 63 64 87 106 117 126 128
    EQUAL_SIGN (262) 29 30 31 32 33 34 59 90
    SEMICOLON (263) 8 9 10 11 73 74 75 78 83 84 85 86 88 106 123
    COLON (264) 118 124
    COMMA (265) 20 22 24 26 28 71
    DOT (266) 60
    PLUS (267) 35
    MINUS (268) 36
    MULTIPLY (269) 38
    DIVIDE (270) 39
    PUBLIC <sval> (271) 3 46 66
    PRIVATE <sval> (272) 47 65
    CLASS (273) 3
    CLASS_NAME <sval> (274) 3 13 59
    NEW (275) 59
    IF (276) 126 128
    ELSE (277) 128 130
    FOR (278) 87
    DO (279) 106
    WHILE (280) 106
    CONDITION_SYMBOL (281) 92 107 131
    BOOL_OP (282) 99 111 135
    INCREAMENT_DECREAMENT (283) 102
    LOOP_STEP (284) 103
    SWITCH (285) 117
    CASE (286) 118
    DEFAULT (287) 124
    BREAK (288) 123
    RETURN (289) 73 74 75
    IDENT <sval> (290) 12
    VOID (291) 63
    INT (292) 14 54
    CHAR (293) 16 56
    DOUBLE (294) 15 55
    BOOLEAN (295) 17 57
    STRING (296) 18 58
    INT_VALUE <ival> (297) 29 49 93 104 113 120
    CHAR_VALUE <cval> (298) 31 50 95 115 121
    DOUBLE_VALUE <dval> (299) 30 51 94 105 114
    BOOLEAN_VALUE <sval> (300) 32 52 96 108 116 132
    STRING_VALUE <sval> (301) 33 53


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    program (48)
        on left: 1 2
        on right: 0 2
    class_identifier (49)
        on left: 3
        on right: 2 7
    class_body (50)
        on left: 4 5 6 7
        on right: 3 5 6 7
    class_members (51)
        on left: 8 9 10 11
        on right: 6
    VAR_NAME <sval> (52)
        on left: 12 13
        on right: 29 30 31 32 33 34 44 59 60 63 64 69 74 90 92 97 101 109 112 117 133
    variable_initialization (53)
        on left: 14 15 16 17 18
        on right: 8 83
    next_int (54)
        on left: 19 20
        on right: 14 20
    next_double (55)
        on left: 21 22
        on right: 15 22
    next_char (56)
        on left: 23 24
        on right: 16 24
    next_bool (57)
        on left: 25 26
        on right: 17 26
    next_string (58)
        on left: 27 28
        on right: 18 28
    int_init (59)
        on left: 29
        on right: 14 20
    double_init (60)
        on left: 30
        on right: 15 22
    char_init (61)
        on left: 31
        on right: 16 24
    bool_init (62)
        on left: 32
        on right: 17 26
    string_init (63)
        on left: 33
        on right: 18 28
    variable_assignment (64)
        on left: 34
        on right: 9 78 84
    expression (65)
        on left: 35 36 37
        on right: 34 35 36 41
    term (66)
        on left: 38 39 40
        on right: 35 36 37 38 39
    par (67)
        on left: 41 42
        on right: 38 39 40
    id (68)
        on left: 43 44 45
        on right: 42 45
    visibility (69)
        on left: 46 47 48
        on right: 8 14 15 16 17 18
    variable_value (70)
        on left: 49 50 51 52 53
        on right: 43 75 90
    variable_type (71)
        on left: 54 55 56 57 58
        on right: 64 69 90
    class_instance (72)
        on left: 59
        on right: 11 85
    member_access (73)
        on left: 60
        on right: 10 86
    parenthesis (74)
        on left: 61 62
        on right: 60
    functions (75)
        on left: 63 64
        on right: 5
    function_visibility (76)
        on left: 65 66
        on right: 63 64
    arguments (77)
        on left: 67 68
        on right: 63 64
    parameters (78)
        on left: 69
        on right: 68 71
    arguments_end (79)
        on left: 70 71
        on right: 69
    inside_void_function (80)
        on left: 72 73
        on right: 63
    inside_function (81)
        on left: 74 75
        on right: 64
    inside_brackets (82)
        on left: 76 77 78
        on right: 72 73 74 75 77 87 106 126 128 130
    loops_n_condition (83)
        on left: 79 80 81 82 83 84 85 86
        on right: 77
    for_statement (84)
        on left: 87
        on right: 79
    for_condition (85)
        on left: 88
        on right: 87
    for_variable (86)
        on left: 89 90
        on right: 88
    for_comparison (87)
        on left: 91 92
        on right: 88 99
    comparison_value (88)
        on left: 93 94 95 96 97
        on right: 92
    for_bool_operator (89)
        on left: 98 99
        on right: 92
    for_step (90)
        on left: 100 101
        on right: 88
    step (91)
        on left: 102 103
        on right: 101
    step_value (92)
        on left: 104 105
        on right: 103
    do_while (93)
        on left: 106
        on right: 81
    do_condition (94)
        on left: 107 108 109
        on right: 106 111
    do_bool_operator (95)
        on left: 110 111
        on right: 107
    operand (96)
        on left: 112 113 114 115 116
        on right: 107 131
    switch (97)
        on left: 117
        on right: 80
    case (98)
        on left: 118 119
        on right: 117 118
    switch_value (99)
        on left: 120 121
        on right: 118
    switch_content (100)
        on left: 122 123
        on right: 118 124
    default (101)
        on left: 124 125
        on right: 117
    if (102)
        on left: 126
        on right: 82
    else_if (103)
        on left: 127 128 129
        on right: 126 128
    else (104)
        on left: 130
        on right: 129
    if_condition (105)
        on left: 131 132 133
        on right: 126 128 135
    if_bool_operator (106)
        on left: 134 135
        on right: 131


State 0

    0 $accept: • program $end

    PUBLIC  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program           go to state 2
    class_identifier  go to state 3


State 1

    3 class_identifier: PUBLIC • CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    CLASS  shift, and go to state 4


State 2

    0 $accept: program • $end

    $end  shift, and go to state 5


State 3

    2 program: class_identifier • program

    PUBLIC  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program           go to state 6
    class_identifier  go to state 3


State 4

    3 class_identifier: PUBLIC CLASS • CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 7


State 5

    0 $accept: program $end •

    $default  accept


State 6

    2 program: class_identifier program •

    $default  reduce using rule 2 (program)


State 7

    3 class_identifier: PUBLIC CLASS CLASS_NAME • CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 8


State 8

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT • class_body CURLY_BRACKET_RIGHT

    PUBLIC      shift, and go to state 9
    PRIVATE     shift, and go to state 10
    CLASS_NAME  shift, and go to state 11
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 4 (class_body)
    PUBLIC               [reduce using rule 48 (visibility)]
    PRIVATE              [reduce using rule 48 (visibility)]
    $default             reduce using rule 48 (visibility)

    class_identifier     go to state 13
    class_body           go to state 14
    class_members        go to state 15
    VAR_NAME             go to state 16
    variable_assignment  go to state 17
    visibility           go to state 18
    class_instance       go to state 19
    member_access        go to state 20
    functions            go to state 21
    function_visibility  go to state 22


State 9

    3 class_identifier: PUBLIC • CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT
   46 visibility: PUBLIC •
   66 function_visibility: PUBLIC •

    CLASS  shift, and go to state 4

    VOID      reduce using rule 66 (function_visibility)
    INT       reduce using rule 46 (visibility)
    INT       [reduce using rule 66 (function_visibility)]
    CHAR      reduce using rule 46 (visibility)
    CHAR      [reduce using rule 66 (function_visibility)]
    DOUBLE    reduce using rule 46 (visibility)
    DOUBLE    [reduce using rule 66 (function_visibility)]
    BOOLEAN   reduce using rule 46 (visibility)
    BOOLEAN   [reduce using rule 66 (function_visibility)]
    STRING    reduce using rule 46 (visibility)
    STRING    [reduce using rule 66 (function_visibility)]
    $default  reduce using rule 46 (visibility)


State 10

   47 visibility: PRIVATE •
   65 function_visibility: PRIVATE •

    VOID      reduce using rule 65 (function_visibility)
    INT       reduce using rule 47 (visibility)
    INT       [reduce using rule 65 (function_visibility)]
    CHAR      reduce using rule 47 (visibility)
    CHAR      [reduce using rule 65 (function_visibility)]
    DOUBLE    reduce using rule 47 (visibility)
    DOUBLE    [reduce using rule 65 (function_visibility)]
    BOOLEAN   reduce using rule 47 (visibility)
    BOOLEAN   [reduce using rule 65 (function_visibility)]
    STRING    reduce using rule 47 (visibility)
    STRING    [reduce using rule 65 (function_visibility)]
    $default  reduce using rule 47 (visibility)


State 11

   13 VAR_NAME: CLASS_NAME •
   59 class_instance: CLASS_NAME • VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    $default  reduce using rule 13 (VAR_NAME)

    VAR_NAME  go to state 24


State 12

   12 VAR_NAME: IDENT •

    $default  reduce using rule 12 (VAR_NAME)


State 13

    7 class_body: class_identifier • class_body

    PUBLIC      shift, and go to state 9
    PRIVATE     shift, and go to state 10
    CLASS_NAME  shift, and go to state 11
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 4 (class_body)
    PUBLIC               [reduce using rule 48 (visibility)]
    PRIVATE              [reduce using rule 48 (visibility)]
    $default             reduce using rule 48 (visibility)

    class_identifier     go to state 13
    class_body           go to state 25
    class_members        go to state 15
    VAR_NAME             go to state 16
    variable_assignment  go to state 17
    visibility           go to state 18
    class_instance       go to state 19
    member_access        go to state 20
    functions            go to state 21
    function_visibility  go to state 22


State 14

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 26


State 15

    6 class_body: class_members • class_body

    PUBLIC      shift, and go to state 9
    PRIVATE     shift, and go to state 10
    CLASS_NAME  shift, and go to state 11
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 4 (class_body)
    PUBLIC               [reduce using rule 48 (visibility)]
    PRIVATE              [reduce using rule 48 (visibility)]
    $default             reduce using rule 48 (visibility)

    class_identifier     go to state 13
    class_body           go to state 27
    class_members        go to state 15
    VAR_NAME             go to state 16
    variable_assignment  go to state 17
    visibility           go to state 18
    class_instance       go to state 19
    member_access        go to state 20
    functions            go to state 21
    function_visibility  go to state 22


State 16

   34 variable_assignment: VAR_NAME • EQUAL_SIGN expression
   60 member_access: VAR_NAME • DOT VAR_NAME parenthesis

    EQUAL_SIGN  shift, and go to state 28
    DOT         shift, and go to state 29


State 17

    9 class_members: variable_assignment • SEMICOLON

    SEMICOLON  shift, and go to state 30


State 18

    8 class_members: visibility • variable_initialization SEMICOLON

    PUBLIC   shift, and go to state 31
    PRIVATE  shift, and go to state 32

    $default  reduce using rule 48 (visibility)

    variable_initialization  go to state 33
    visibility               go to state 34


State 19

   11 class_members: class_instance • SEMICOLON

    SEMICOLON  shift, and go to state 35


State 20

   10 class_members: member_access • SEMICOLON

    SEMICOLON  shift, and go to state 36


State 21

    5 class_body: functions • class_body

    PUBLIC      shift, and go to state 9
    PRIVATE     shift, and go to state 10
    CLASS_NAME  shift, and go to state 11
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 4 (class_body)
    PUBLIC               [reduce using rule 48 (visibility)]
    PRIVATE              [reduce using rule 48 (visibility)]
    $default             reduce using rule 48 (visibility)

    class_identifier     go to state 13
    class_body           go to state 37
    class_members        go to state 15
    VAR_NAME             go to state 16
    variable_assignment  go to state 17
    visibility           go to state 18
    class_instance       go to state 19
    member_access        go to state 20
    functions            go to state 21
    function_visibility  go to state 22


State 22

   63 functions: function_visibility • VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT
   64          | function_visibility • variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    VOID     shift, and go to state 38
    INT      shift, and go to state 39
    CHAR     shift, and go to state 40
    DOUBLE   shift, and go to state 41
    BOOLEAN  shift, and go to state 42
    STRING   shift, and go to state 43

    variable_type  go to state 44


State 23

   13 VAR_NAME: CLASS_NAME •

    $default  reduce using rule 13 (VAR_NAME)


State 24

   59 class_instance: CLASS_NAME VAR_NAME • EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    EQUAL_SIGN  shift, and go to state 45


State 25

    7 class_body: class_identifier class_body •

    $default  reduce using rule 7 (class_body)


State 26

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT •

    $default  reduce using rule 3 (class_identifier)


State 27

    6 class_body: class_members class_body •

    $default  reduce using rule 6 (class_body)


State 28

   34 variable_assignment: VAR_NAME EQUAL_SIGN • expression

    BRACKET_LEFT   shift, and go to state 46
    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    VAR_NAME        go to state 52
    expression      go to state 53
    term            go to state 54
    par             go to state 55
    id              go to state 56
    variable_value  go to state 57


State 29

   60 member_access: VAR_NAME DOT • VAR_NAME parenthesis

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 58


State 30

    9 class_members: variable_assignment SEMICOLON •

    $default  reduce using rule 9 (class_members)


State 31

   46 visibility: PUBLIC •

    $default  reduce using rule 46 (visibility)


State 32

   47 visibility: PRIVATE •

    $default  reduce using rule 47 (visibility)


State 33

    8 class_members: visibility variable_initialization • SEMICOLON

    SEMICOLON  shift, and go to state 59


State 34

   14 variable_initialization: visibility • INT int_init next_int
   15                        | visibility • DOUBLE double_init next_double
   16                        | visibility • CHAR char_init next_char
   17                        | visibility • BOOLEAN bool_init next_bool
   18                        | visibility • STRING string_init next_string

    INT      shift, and go to state 60
    CHAR     shift, and go to state 61
    DOUBLE   shift, and go to state 62
    BOOLEAN  shift, and go to state 63
    STRING   shift, and go to state 64


State 35

   11 class_members: class_instance SEMICOLON •

    $default  reduce using rule 11 (class_members)


State 36

   10 class_members: member_access SEMICOLON •

    $default  reduce using rule 10 (class_members)


State 37

    5 class_body: functions class_body •

    $default  reduce using rule 5 (class_body)


State 38

   63 functions: function_visibility VOID • VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 65


State 39

   54 variable_type: INT •

    $default  reduce using rule 54 (variable_type)


State 40

   56 variable_type: CHAR •

    $default  reduce using rule 56 (variable_type)


State 41

   55 variable_type: DOUBLE •

    $default  reduce using rule 55 (variable_type)


State 42

   57 variable_type: BOOLEAN •

    $default  reduce using rule 57 (variable_type)


State 43

   58 variable_type: STRING •

    $default  reduce using rule 58 (variable_type)


State 44

   64 functions: function_visibility variable_type • VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 66


State 45

   59 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN • NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    NEW  shift, and go to state 67


State 46

   41 par: BRACKET_LEFT • expression BRACKET_RIGHT
   45 id: BRACKET_LEFT • id BRACKET_RIGHT

    BRACKET_LEFT   shift, and go to state 46
    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    VAR_NAME        go to state 52
    expression      go to state 68
    term            go to state 54
    par             go to state 55
    id              go to state 69
    variable_value  go to state 57


State 47

   49 variable_value: INT_VALUE •

    $default  reduce using rule 49 (variable_value)


State 48

   50 variable_value: CHAR_VALUE •

    $default  reduce using rule 50 (variable_value)


State 49

   51 variable_value: DOUBLE_VALUE •

    $default  reduce using rule 51 (variable_value)


State 50

   52 variable_value: BOOLEAN_VALUE •

    $default  reduce using rule 52 (variable_value)


State 51

   53 variable_value: STRING_VALUE •

    $default  reduce using rule 53 (variable_value)


State 52

   44 id: VAR_NAME •

    $default  reduce using rule 44 (id)


State 53

   34 variable_assignment: VAR_NAME EQUAL_SIGN expression •
   35 expression: expression • PLUS term
   36           | expression • MINUS term

    PLUS   shift, and go to state 70
    MINUS  shift, and go to state 71

    $default  reduce using rule 34 (variable_assignment)


State 54

   37 expression: term •
   38 term: term • MULTIPLY par
   39     | term • DIVIDE par

    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    $default  reduce using rule 37 (expression)


State 55

   40 term: par •

    $default  reduce using rule 40 (term)


State 56

   42 par: id •

    $default  reduce using rule 42 (par)


State 57

   43 id: variable_value •

    $default  reduce using rule 43 (id)


State 58

   60 member_access: VAR_NAME DOT VAR_NAME • parenthesis

    BRACKET_LEFT  shift, and go to state 74

    $default  reduce using rule 61 (parenthesis)

    parenthesis  go to state 75


State 59

    8 class_members: visibility variable_initialization SEMICOLON •

    $default  reduce using rule 8 (class_members)


State 60

   14 variable_initialization: visibility INT • int_init next_int

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 76
    int_init  go to state 77


State 61

   16 variable_initialization: visibility CHAR • char_init next_char

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME   go to state 78
    char_init  go to state 79


State 62

   15 variable_initialization: visibility DOUBLE • double_init next_double

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME     go to state 80
    double_init  go to state 81


State 63

   17 variable_initialization: visibility BOOLEAN • bool_init next_bool

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME   go to state 82
    bool_init  go to state 83


State 64

   18 variable_initialization: visibility STRING • string_init next_string

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME     go to state 84
    string_init  go to state 85


State 65

   63 functions: function_visibility VOID VAR_NAME • BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 86


State 66

   64 functions: function_visibility variable_type VAR_NAME • BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 87


State 67

   59 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW • CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 88


State 68

   35 expression: expression • PLUS term
   36           | expression • MINUS term
   41 par: BRACKET_LEFT expression • BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 89
    PLUS           shift, and go to state 70
    MINUS          shift, and go to state 71


State 69

   42 par: id •
   45 id: BRACKET_LEFT id • BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 90

    BRACKET_RIGHT  [reduce using rule 42 (par)]
    $default       reduce using rule 42 (par)


State 70

   35 expression: expression PLUS • term

    BRACKET_LEFT   shift, and go to state 46
    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    VAR_NAME        go to state 52
    term            go to state 91
    par             go to state 55
    id              go to state 56
    variable_value  go to state 57


State 71

   36 expression: expression MINUS • term

    BRACKET_LEFT   shift, and go to state 46
    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    VAR_NAME        go to state 52
    term            go to state 92
    par             go to state 55
    id              go to state 56
    variable_value  go to state 57


State 72

   38 term: term MULTIPLY • par

    BRACKET_LEFT   shift, and go to state 46
    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    VAR_NAME        go to state 52
    par             go to state 93
    id              go to state 56
    variable_value  go to state 57


State 73

   39 term: term DIVIDE • par

    BRACKET_LEFT   shift, and go to state 46
    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    VAR_NAME        go to state 52
    par             go to state 94
    id              go to state 56
    variable_value  go to state 57


State 74

   62 parenthesis: BRACKET_LEFT • BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 95


State 75

   60 member_access: VAR_NAME DOT VAR_NAME parenthesis •

    $default  reduce using rule 60 (member_access)


State 76

   29 int_init: VAR_NAME • EQUAL_SIGN INT_VALUE

    EQUAL_SIGN  shift, and go to state 96


State 77

   14 variable_initialization: visibility INT int_init • next_int

    COMMA  shift, and go to state 97

    $default  reduce using rule 19 (next_int)

    next_int  go to state 98


State 78

   31 char_init: VAR_NAME • EQUAL_SIGN CHAR_VALUE

    EQUAL_SIGN  shift, and go to state 99


State 79

   16 variable_initialization: visibility CHAR char_init • next_char

    COMMA  shift, and go to state 100

    $default  reduce using rule 23 (next_char)

    next_char  go to state 101


State 80

   30 double_init: VAR_NAME • EQUAL_SIGN DOUBLE_VALUE

    EQUAL_SIGN  shift, and go to state 102


State 81

   15 variable_initialization: visibility DOUBLE double_init • next_double

    COMMA  shift, and go to state 103

    $default  reduce using rule 21 (next_double)

    next_double  go to state 104


State 82

   32 bool_init: VAR_NAME • EQUAL_SIGN BOOLEAN_VALUE

    EQUAL_SIGN  shift, and go to state 105


State 83

   17 variable_initialization: visibility BOOLEAN bool_init • next_bool

    COMMA  shift, and go to state 106

    $default  reduce using rule 25 (next_bool)

    next_bool  go to state 107


State 84

   33 string_init: VAR_NAME • EQUAL_SIGN STRING_VALUE

    EQUAL_SIGN  shift, and go to state 108


State 85

   18 variable_initialization: visibility STRING string_init • next_string

    COMMA  shift, and go to state 109

    $default  reduce using rule 27 (next_string)

    next_string  go to state 110


State 86

   63 functions: function_visibility VOID VAR_NAME BRACKET_LEFT • arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    INT      shift, and go to state 39
    CHAR     shift, and go to state 40
    DOUBLE   shift, and go to state 41
    BOOLEAN  shift, and go to state 42
    STRING   shift, and go to state 43

    $default  reduce using rule 67 (arguments)

    variable_type  go to state 111
    arguments      go to state 112
    parameters     go to state 113


State 87

   64 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT • arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    INT      shift, and go to state 39
    CHAR     shift, and go to state 40
    DOUBLE   shift, and go to state 41
    BOOLEAN  shift, and go to state 42
    STRING   shift, and go to state 43

    $default  reduce using rule 67 (arguments)

    variable_type  go to state 111
    arguments      go to state 114
    parameters     go to state 113


State 88

   59 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME • BRACKET_LEFT BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 115


State 89

   41 par: BRACKET_LEFT expression BRACKET_RIGHT •

    $default  reduce using rule 41 (par)


State 90

   45 id: BRACKET_LEFT id BRACKET_RIGHT •

    $default  reduce using rule 45 (id)


State 91

   35 expression: expression PLUS term •
   38 term: term • MULTIPLY par
   39     | term • DIVIDE par

    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    $default  reduce using rule 35 (expression)


State 92

   36 expression: expression MINUS term •
   38 term: term • MULTIPLY par
   39     | term • DIVIDE par

    MULTIPLY  shift, and go to state 72
    DIVIDE    shift, and go to state 73

    $default  reduce using rule 36 (expression)


State 93

   38 term: term MULTIPLY par •

    $default  reduce using rule 38 (term)


State 94

   39 term: term DIVIDE par •

    $default  reduce using rule 39 (term)


State 95

   62 parenthesis: BRACKET_LEFT BRACKET_RIGHT •

    $default  reduce using rule 62 (parenthesis)


State 96

   29 int_init: VAR_NAME EQUAL_SIGN • INT_VALUE

    INT_VALUE  shift, and go to state 116


State 97

   20 next_int: COMMA • int_init next_int

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 76
    int_init  go to state 117


State 98

   14 variable_initialization: visibility INT int_init next_int •

    $default  reduce using rule 14 (variable_initialization)


State 99

   31 char_init: VAR_NAME EQUAL_SIGN • CHAR_VALUE

    CHAR_VALUE  shift, and go to state 118


State 100

   24 next_char: COMMA • char_init next_char

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME   go to state 78
    char_init  go to state 119


State 101

   16 variable_initialization: visibility CHAR char_init next_char •

    $default  reduce using rule 16 (variable_initialization)


State 102

   30 double_init: VAR_NAME EQUAL_SIGN • DOUBLE_VALUE

    DOUBLE_VALUE  shift, and go to state 120


State 103

   22 next_double: COMMA • double_init next_double

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME     go to state 80
    double_init  go to state 121


State 104

   15 variable_initialization: visibility DOUBLE double_init next_double •

    $default  reduce using rule 15 (variable_initialization)


State 105

   32 bool_init: VAR_NAME EQUAL_SIGN • BOOLEAN_VALUE

    BOOLEAN_VALUE  shift, and go to state 122


State 106

   26 next_bool: COMMA • bool_init next_bool

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME   go to state 82
    bool_init  go to state 123


State 107

   17 variable_initialization: visibility BOOLEAN bool_init next_bool •

    $default  reduce using rule 17 (variable_initialization)


State 108

   33 string_init: VAR_NAME EQUAL_SIGN • STRING_VALUE

    STRING_VALUE  shift, and go to state 124


State 109

   28 next_string: COMMA • string_init next_string

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME     go to state 84
    string_init  go to state 125


State 110

   18 variable_initialization: visibility STRING string_init next_string •

    $default  reduce using rule 18 (variable_initialization)


State 111

   69 parameters: variable_type • VAR_NAME arguments_end

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 126


State 112

   63 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 127


State 113

   68 arguments: parameters •

    $default  reduce using rule 68 (arguments)


State 114

   64 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 128


State 115

   59 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT • BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 129


State 116

   29 int_init: VAR_NAME EQUAL_SIGN INT_VALUE •

    $default  reduce using rule 29 (int_init)


State 117

   20 next_int: COMMA int_init • next_int

    COMMA  shift, and go to state 97

    $default  reduce using rule 19 (next_int)

    next_int  go to state 130


State 118

   31 char_init: VAR_NAME EQUAL_SIGN CHAR_VALUE •

    $default  reduce using rule 31 (char_init)


State 119

   24 next_char: COMMA char_init • next_char

    COMMA  shift, and go to state 100

    $default  reduce using rule 23 (next_char)

    next_char  go to state 131


State 120

   30 double_init: VAR_NAME EQUAL_SIGN DOUBLE_VALUE •

    $default  reduce using rule 30 (double_init)


State 121

   22 next_double: COMMA double_init • next_double

    COMMA  shift, and go to state 103

    $default  reduce using rule 21 (next_double)

    next_double  go to state 132


State 122

   32 bool_init: VAR_NAME EQUAL_SIGN BOOLEAN_VALUE •

    $default  reduce using rule 32 (bool_init)


State 123

   26 next_bool: COMMA bool_init • next_bool

    COMMA  shift, and go to state 106

    $default  reduce using rule 25 (next_bool)

    next_bool  go to state 133


State 124

   33 string_init: VAR_NAME EQUAL_SIGN STRING_VALUE •

    $default  reduce using rule 33 (string_init)


State 125

   28 next_string: COMMA string_init • next_string

    COMMA  shift, and go to state 109

    $default  reduce using rule 27 (next_string)

    next_string  go to state 134


State 126

   69 parameters: variable_type VAR_NAME • arguments_end

    COMMA  shift, and go to state 135

    $default  reduce using rule 70 (arguments_end)

    arguments_end  go to state 136


State 127

   63 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 137


State 128

   64 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 138


State 129

   59 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT •

    $default  reduce using rule 59 (class_instance)


State 130

   20 next_int: COMMA int_init next_int •

    $default  reduce using rule 20 (next_int)


State 131

   24 next_char: COMMA char_init next_char •

    $default  reduce using rule 24 (next_char)


State 132

   22 next_double: COMMA double_init next_double •

    $default  reduce using rule 22 (next_double)


State 133

   26 next_bool: COMMA bool_init next_bool •

    $default  reduce using rule 26 (next_bool)


State 134

   28 next_string: COMMA string_init next_string •

    $default  reduce using rule 28 (next_string)


State 135

   71 arguments_end: COMMA • parameters

    INT      shift, and go to state 39
    CHAR     shift, and go to state 40
    DOUBLE   shift, and go to state 41
    BOOLEAN  shift, and go to state 42
    STRING   shift, and go to state 43

    variable_type  go to state 111
    parameters     go to state 139


State 136

   69 parameters: variable_type VAR_NAME arguments_end •

    $default  reduce using rule 69 (parameters)


State 137

   63 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_void_function CURLY_BRACKET_RIGHT

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 76 (inside_brackets)
    RETURN               reduce using rule 76 (inside_brackets)
    $default             reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_void_function     go to state 148
    inside_brackets          go to state 149
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 138

   64 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_function CURLY_BRACKET_RIGHT

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    RETURN    reduce using rule 76 (inside_brackets)
    $default  reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_function          go to state 155
    inside_brackets          go to state 156
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 139

   71 arguments_end: COMMA parameters •

    $default  reduce using rule 71 (arguments_end)


State 140

  126 if: IF • BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    BRACKET_LEFT  shift, and go to state 157


State 141

   87 for_statement: FOR • BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 158


State 142

  106 do_while: DO • CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    CURLY_BRACKET_LEFT  shift, and go to state 159


State 143

  117 switch: SWITCH • BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 160


State 144

   83 loops_n_condition: variable_initialization • SEMICOLON

    SEMICOLON  shift, and go to state 161


State 145

   78 inside_brackets: variable_assignment • SEMICOLON
   84 loops_n_condition: variable_assignment • SEMICOLON

    SEMICOLON  shift, and go to state 162


State 146

   85 loops_n_condition: class_instance • SEMICOLON

    SEMICOLON  shift, and go to state 163


State 147

   86 loops_n_condition: member_access • SEMICOLON

    SEMICOLON  shift, and go to state 164


State 148

   63 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 165


State 149

   72 inside_void_function: inside_brackets •
   73                     | inside_brackets • RETURN SEMICOLON

    RETURN  shift, and go to state 166

    $default  reduce using rule 72 (inside_void_function)


State 150

   77 inside_brackets: loops_n_condition • inside_brackets

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 76 (inside_brackets)
    RETURN               reduce using rule 76 (inside_brackets)
    $default             reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_brackets          go to state 167
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 151

   79 loops_n_condition: for_statement •

    $default  reduce using rule 79 (loops_n_condition)


State 152

   81 loops_n_condition: do_while •

    $default  reduce using rule 81 (loops_n_condition)


State 153

   80 loops_n_condition: switch •

    $default  reduce using rule 80 (loops_n_condition)


State 154

   82 loops_n_condition: if •

    $default  reduce using rule 82 (loops_n_condition)


State 155

   64 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 168


State 156

   74 inside_function: inside_brackets • RETURN VAR_NAME SEMICOLON
   75                | inside_brackets • RETURN variable_value SEMICOLON

    RETURN  shift, and go to state 169


State 157

  126 if: IF BRACKET_LEFT • if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 170
    CHAR_VALUE     shift, and go to state 171
    DOUBLE_VALUE   shift, and go to state 172
    BOOLEAN_VALUE  shift, and go to state 173

    VAR_NAME      go to state 174
    operand       go to state 175
    if_condition  go to state 176


State 158

   87 for_statement: FOR BRACKET_LEFT • for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    INT      shift, and go to state 39
    CHAR     shift, and go to state 40
    DOUBLE   shift, and go to state 41
    BOOLEAN  shift, and go to state 42
    STRING   shift, and go to state 43

    $default  reduce using rule 89 (for_variable)

    variable_type  go to state 177
    for_condition  go to state 178
    for_variable   go to state 179


State 159

  106 do_while: DO CURLY_BRACKET_LEFT • inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 76 (inside_brackets)
    $default             reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_brackets          go to state 180
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 160

  117 switch: SWITCH BRACKET_LEFT • VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 181


State 161

   83 loops_n_condition: variable_initialization SEMICOLON •

    $default  reduce using rule 83 (loops_n_condition)


State 162

   78 inside_brackets: variable_assignment SEMICOLON •
   84 loops_n_condition: variable_assignment SEMICOLON •

    CURLY_BRACKET_RIGHT  reduce using rule 78 (inside_brackets)
    CURLY_BRACKET_RIGHT  [reduce using rule 84 (loops_n_condition)]
    RETURN               reduce using rule 78 (inside_brackets)
    RETURN               [reduce using rule 84 (loops_n_condition)]
    $default             reduce using rule 84 (loops_n_condition)


State 163

   85 loops_n_condition: class_instance SEMICOLON •

    $default  reduce using rule 85 (loops_n_condition)


State 164

   86 loops_n_condition: member_access SEMICOLON •

    $default  reduce using rule 86 (loops_n_condition)


State 165

   63 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT •

    $default  reduce using rule 63 (functions)


State 166

   73 inside_void_function: inside_brackets RETURN • SEMICOLON

    SEMICOLON  shift, and go to state 182


State 167

   77 inside_brackets: loops_n_condition inside_brackets •

    $default  reduce using rule 77 (inside_brackets)


State 168

   64 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT •

    $default  reduce using rule 64 (functions)


State 169

   74 inside_function: inside_brackets RETURN • VAR_NAME SEMICOLON
   75                | inside_brackets RETURN • variable_value SEMICOLON

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    VAR_NAME        go to state 183
    variable_value  go to state 184


State 170

  113 operand: INT_VALUE •

    $default  reduce using rule 113 (operand)


State 171

  115 operand: CHAR_VALUE •

    $default  reduce using rule 115 (operand)


State 172

  114 operand: DOUBLE_VALUE •

    $default  reduce using rule 114 (operand)


State 173

  116 operand: BOOLEAN_VALUE •
  132 if_condition: BOOLEAN_VALUE •

    BRACKET_RIGHT  reduce using rule 132 (if_condition)
    $default       reduce using rule 116 (operand)


State 174

  112 operand: VAR_NAME •
  133 if_condition: VAR_NAME •

    BRACKET_RIGHT  reduce using rule 133 (if_condition)
    $default       reduce using rule 112 (operand)


State 175

  131 if_condition: operand • CONDITION_SYMBOL operand if_bool_operator

    CONDITION_SYMBOL  shift, and go to state 185


State 176

  126 if: IF BRACKET_LEFT if_condition • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    BRACKET_RIGHT  shift, and go to state 186


State 177

   90 for_variable: variable_type • VAR_NAME EQUAL_SIGN variable_value

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    VAR_NAME  go to state 187


State 178

   87 for_statement: FOR BRACKET_LEFT for_condition • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 188


State 179

   88 for_condition: for_variable • SEMICOLON for_comparison SEMICOLON for_step

    SEMICOLON  shift, and go to state 189


State 180

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets • CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    CURLY_BRACKET_RIGHT  shift, and go to state 190


State 181

  117 switch: SWITCH BRACKET_LEFT VAR_NAME • BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 191


State 182

   73 inside_void_function: inside_brackets RETURN SEMICOLON •

    $default  reduce using rule 73 (inside_void_function)


State 183

   74 inside_function: inside_brackets RETURN VAR_NAME • SEMICOLON

    SEMICOLON  shift, and go to state 192


State 184

   75 inside_function: inside_brackets RETURN variable_value • SEMICOLON

    SEMICOLON  shift, and go to state 193


State 185

  131 if_condition: operand CONDITION_SYMBOL • operand if_bool_operator

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 170
    CHAR_VALUE     shift, and go to state 171
    DOUBLE_VALUE   shift, and go to state 172
    BOOLEAN_VALUE  shift, and go to state 194

    VAR_NAME  go to state 195
    operand   go to state 196


State 186

  126 if: IF BRACKET_LEFT if_condition BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    CURLY_BRACKET_LEFT  shift, and go to state 197


State 187

   90 for_variable: variable_type VAR_NAME • EQUAL_SIGN variable_value

    EQUAL_SIGN  shift, and go to state 198


State 188

   87 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 199


State 189

   88 for_condition: for_variable SEMICOLON • for_comparison SEMICOLON for_step

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    $default  reduce using rule 91 (for_comparison)

    VAR_NAME        go to state 200
    for_comparison  go to state 201


State 190

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT • WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    WHILE  shift, and go to state 202


State 191

  117 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT • CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 203


State 192

   74 inside_function: inside_brackets RETURN VAR_NAME SEMICOLON •

    $default  reduce using rule 74 (inside_function)


State 193

   75 inside_function: inside_brackets RETURN variable_value SEMICOLON •

    $default  reduce using rule 75 (inside_function)


State 194

  116 operand: BOOLEAN_VALUE •

    $default  reduce using rule 116 (operand)


State 195

  112 operand: VAR_NAME •

    $default  reduce using rule 112 (operand)


State 196

  131 if_condition: operand CONDITION_SYMBOL operand • if_bool_operator

    BOOL_OP  shift, and go to state 204

    $default  reduce using rule 134 (if_bool_operator)

    if_bool_operator  go to state 205


State 197

  126 if: IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_brackets CURLY_BRACKET_RIGHT else_if

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 76 (inside_brackets)
    $default             reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_brackets          go to state 206
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 198

   90 for_variable: variable_type VAR_NAME EQUAL_SIGN • variable_value

    INT_VALUE      shift, and go to state 47
    CHAR_VALUE     shift, and go to state 48
    DOUBLE_VALUE   shift, and go to state 49
    BOOLEAN_VALUE  shift, and go to state 50
    STRING_VALUE   shift, and go to state 51

    variable_value  go to state 207


State 199

   87 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_brackets CURLY_BRACKET_RIGHT

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 76 (inside_brackets)
    $default             reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_brackets          go to state 208
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 200

   92 for_comparison: VAR_NAME • CONDITION_SYMBOL comparison_value for_bool_operator

    CONDITION_SYMBOL  shift, and go to state 209


State 201

   88 for_condition: for_variable SEMICOLON for_comparison • SEMICOLON for_step

    SEMICOLON  shift, and go to state 210


State 202

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE • BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    BRACKET_LEFT  shift, and go to state 211


State 203

  117 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT • case default CURLY_BRACKET_RIGHT

    CASE  shift, and go to state 212

    $default  reduce using rule 119 (case)

    case  go to state 213


State 204

  135 if_bool_operator: BOOL_OP • if_condition

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 170
    CHAR_VALUE     shift, and go to state 171
    DOUBLE_VALUE   shift, and go to state 172
    BOOLEAN_VALUE  shift, and go to state 173

    VAR_NAME      go to state 174
    operand       go to state 175
    if_condition  go to state 214


State 205

  131 if_condition: operand CONDITION_SYMBOL operand if_bool_operator •

    $default  reduce using rule 131 (if_condition)


State 206

  126 if: IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets • CURLY_BRACKET_RIGHT else_if

    CURLY_BRACKET_RIGHT  shift, and go to state 215


State 207

   90 for_variable: variable_type VAR_NAME EQUAL_SIGN variable_value •

    $default  reduce using rule 90 (for_variable)


State 208

   87 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 216


State 209

   92 for_comparison: VAR_NAME CONDITION_SYMBOL • comparison_value for_bool_operator

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 217
    CHAR_VALUE     shift, and go to state 218
    DOUBLE_VALUE   shift, and go to state 219
    BOOLEAN_VALUE  shift, and go to state 220

    VAR_NAME          go to state 221
    comparison_value  go to state 222


State 210

   88 for_condition: for_variable SEMICOLON for_comparison SEMICOLON • for_step

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    $default  reduce using rule 100 (for_step)

    VAR_NAME  go to state 223
    for_step  go to state 224


State 211

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT • do_condition BRACKET_RIGHT SEMICOLON

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 170
    CHAR_VALUE     shift, and go to state 171
    DOUBLE_VALUE   shift, and go to state 172
    BOOLEAN_VALUE  shift, and go to state 225

    VAR_NAME      go to state 226
    do_condition  go to state 227
    operand       go to state 228


State 212

  118 case: CASE • switch_value COLON switch_content case

    INT_VALUE   shift, and go to state 229
    CHAR_VALUE  shift, and go to state 230

    switch_value  go to state 231


State 213

  117 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case • default CURLY_BRACKET_RIGHT

    DEFAULT  shift, and go to state 232

    $default  reduce using rule 125 (default)

    default  go to state 233


State 214

  135 if_bool_operator: BOOL_OP if_condition •

    $default  reduce using rule 135 (if_bool_operator)


State 215

  126 if: IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT • else_if

    ELSE  shift, and go to state 234

    $default  reduce using rule 127 (else_if)

    else_if  go to state 235
    else     go to state 236


State 216

   87 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT •

    $default  reduce using rule 87 (for_statement)


State 217

   93 comparison_value: INT_VALUE •

    $default  reduce using rule 93 (comparison_value)


State 218

   95 comparison_value: CHAR_VALUE •

    $default  reduce using rule 95 (comparison_value)


State 219

   94 comparison_value: DOUBLE_VALUE •

    $default  reduce using rule 94 (comparison_value)


State 220

   96 comparison_value: BOOLEAN_VALUE •

    $default  reduce using rule 96 (comparison_value)


State 221

   97 comparison_value: VAR_NAME •

    $default  reduce using rule 97 (comparison_value)


State 222

   92 for_comparison: VAR_NAME CONDITION_SYMBOL comparison_value • for_bool_operator

    BOOL_OP  shift, and go to state 237

    $default  reduce using rule 98 (for_bool_operator)

    for_bool_operator  go to state 238


State 223

  101 for_step: VAR_NAME • step

    INCREAMENT_DECREAMENT  shift, and go to state 239
    LOOP_STEP              shift, and go to state 240

    step  go to state 241


State 224

   88 for_condition: for_variable SEMICOLON for_comparison SEMICOLON for_step •

    $default  reduce using rule 88 (for_condition)


State 225

  108 do_condition: BOOLEAN_VALUE •
  116 operand: BOOLEAN_VALUE •

    CONDITION_SYMBOL  reduce using rule 116 (operand)
    $default          reduce using rule 108 (do_condition)


State 226

  109 do_condition: VAR_NAME •
  112 operand: VAR_NAME •

    CONDITION_SYMBOL  reduce using rule 112 (operand)
    $default          reduce using rule 109 (do_condition)


State 227

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition • BRACKET_RIGHT SEMICOLON

    BRACKET_RIGHT  shift, and go to state 242


State 228

  107 do_condition: operand • CONDITION_SYMBOL operand do_bool_operator

    CONDITION_SYMBOL  shift, and go to state 243


State 229

  120 switch_value: INT_VALUE •

    $default  reduce using rule 120 (switch_value)


State 230

  121 switch_value: CHAR_VALUE •

    $default  reduce using rule 121 (switch_value)


State 231

  118 case: CASE switch_value • COLON switch_content case

    COLON  shift, and go to state 244


State 232

  124 default: DEFAULT • COLON switch_content

    COLON  shift, and go to state 245


State 233

  117 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 246


State 234

  128 else_if: ELSE • IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if
  130 else: ELSE • CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 247
    IF                  shift, and go to state 248


State 235

  126 if: IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if •

    $default  reduce using rule 126 (if)


State 236

  129 else_if: else •

    $default  reduce using rule 129 (else_if)


State 237

   99 for_bool_operator: BOOL_OP • for_comparison

    CLASS_NAME  shift, and go to state 23
    IDENT       shift, and go to state 12

    $default  reduce using rule 91 (for_comparison)

    VAR_NAME        go to state 200
    for_comparison  go to state 249


State 238

   92 for_comparison: VAR_NAME CONDITION_SYMBOL comparison_value for_bool_operator •

    $default  reduce using rule 92 (for_comparison)


State 239

  102 step: INCREAMENT_DECREAMENT •

    $default  reduce using rule 102 (step)


State 240

  103 step: LOOP_STEP • step_value

    INT_VALUE     shift, and go to state 250
    DOUBLE_VALUE  shift, and go to state 251

    step_value  go to state 252


State 241

  101 for_step: VAR_NAME step •

    $default  reduce using rule 101 (for_step)


State 242

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT • SEMICOLON

    SEMICOLON  shift, and go to state 253


State 243

  107 do_condition: operand CONDITION_SYMBOL • operand do_bool_operator

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 170
    CHAR_VALUE     shift, and go to state 171
    DOUBLE_VALUE   shift, and go to state 172
    BOOLEAN_VALUE  shift, and go to state 194

    VAR_NAME  go to state 195
    operand   go to state 254


State 244

  118 case: CASE switch_value COLON • switch_content case

    BREAK  shift, and go to state 255

    $default  reduce using rule 122 (switch_content)

    switch_content  go to state 256


State 245

  124 default: DEFAULT COLON • switch_content

    BREAK  shift, and go to state 255

    $default  reduce using rule 122 (switch_content)

    switch_content  go to state 257


State 246

  117 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT •

    $default  reduce using rule 117 (switch)


State 247

  130 else: ELSE CURLY_BRACKET_LEFT • inside_brackets CURLY_BRACKET_RIGHT

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 76 (inside_brackets)
    $default             reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_brackets          go to state 258
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 248

  128 else_if: ELSE IF • BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    BRACKET_LEFT  shift, and go to state 259


State 249

   99 for_bool_operator: BOOL_OP for_comparison •

    $default  reduce using rule 99 (for_bool_operator)


State 250

  104 step_value: INT_VALUE •

    $default  reduce using rule 104 (step_value)


State 251

  105 step_value: DOUBLE_VALUE •

    $default  reduce using rule 105 (step_value)


State 252

  103 step: LOOP_STEP step_value •

    $default  reduce using rule 103 (step)


State 253

  106 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON •

    $default  reduce using rule 106 (do_while)


State 254

  107 do_condition: operand CONDITION_SYMBOL operand • do_bool_operator

    BOOL_OP  shift, and go to state 260

    $default  reduce using rule 110 (do_bool_operator)

    do_bool_operator  go to state 261


State 255

  123 switch_content: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 262


State 256

  118 case: CASE switch_value COLON switch_content • case

    CASE  shift, and go to state 212

    $default  reduce using rule 119 (case)

    case  go to state 263


State 257

  124 default: DEFAULT COLON switch_content •

    $default  reduce using rule 124 (default)


State 258

  130 else: ELSE CURLY_BRACKET_LEFT inside_brackets • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 264


State 259

  128 else_if: ELSE IF BRACKET_LEFT • if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 170
    CHAR_VALUE     shift, and go to state 171
    DOUBLE_VALUE   shift, and go to state 172
    BOOLEAN_VALUE  shift, and go to state 173

    VAR_NAME      go to state 174
    operand       go to state 175
    if_condition  go to state 265


State 260

  111 do_bool_operator: BOOL_OP • do_condition

    CLASS_NAME     shift, and go to state 23
    IDENT          shift, and go to state 12
    INT_VALUE      shift, and go to state 170
    CHAR_VALUE     shift, and go to state 171
    DOUBLE_VALUE   shift, and go to state 172
    BOOLEAN_VALUE  shift, and go to state 225

    VAR_NAME      go to state 226
    do_condition  go to state 266
    operand       go to state 228


State 261

  107 do_condition: operand CONDITION_SYMBOL operand do_bool_operator •

    $default  reduce using rule 107 (do_condition)


State 262

  123 switch_content: BREAK SEMICOLON •

    $default  reduce using rule 123 (switch_content)


State 263

  118 case: CASE switch_value COLON switch_content case •

    $default  reduce using rule 118 (case)


State 264

  130 else: ELSE CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT •

    $default  reduce using rule 130 (else)


State 265

  128 else_if: ELSE IF BRACKET_LEFT if_condition • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    BRACKET_RIGHT  shift, and go to state 267


State 266

  111 do_bool_operator: BOOL_OP do_condition •

    $default  reduce using rule 111 (do_bool_operator)


State 267

  128 else_if: ELSE IF BRACKET_LEFT if_condition BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if

    CURLY_BRACKET_LEFT  shift, and go to state 268


State 268

  128 else_if: ELSE IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_brackets CURLY_BRACKET_RIGHT else_if

    PUBLIC      shift, and go to state 31
    PRIVATE     shift, and go to state 32
    CLASS_NAME  shift, and go to state 11
    IF          shift, and go to state 140
    FOR         shift, and go to state 141
    DO          shift, and go to state 142
    SWITCH      shift, and go to state 143
    IDENT       shift, and go to state 12

    CURLY_BRACKET_RIGHT  reduce using rule 76 (inside_brackets)
    $default             reduce using rule 48 (visibility)

    VAR_NAME                 go to state 16
    variable_initialization  go to state 144
    variable_assignment      go to state 145
    visibility               go to state 34
    class_instance           go to state 146
    member_access            go to state 147
    inside_brackets          go to state 269
    loops_n_condition        go to state 150
    for_statement            go to state 151
    do_while                 go to state 152
    switch                   go to state 153
    if                       go to state 154


State 269

  128 else_if: ELSE IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets • CURLY_BRACKET_RIGHT else_if

    CURLY_BRACKET_RIGHT  shift, and go to state 270


State 270

  128 else_if: ELSE IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT • else_if

    ELSE  shift, and go to state 234

    $default  reduce using rule 127 (else_if)

    else_if  go to state 271
    else     go to state 236


State 271

  128 else_if: ELSE IF BRACKET_LEFT if_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT else_if •

    $default  reduce using rule 128 (else_if)
