Terminals unused in grammar

    SINGLE_MARK


Rules useless in parser due to conflicts

   76 operand: VAR_NAME


State 10 conflicts: 1 shift/reduce
State 11 conflicts: 1 shift/reduce
State 12 conflicts: 1 shift/reduce
State 13 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 147 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: ε
    2        | class_identifier

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    4 class_body: ε
    5           | functions class_body
    6           | class_members class_body

    7 class_members: variable_initialization SEMICOLON
    8              | variable_assignment SEMICOLON

    9 variable_initialization: variable_type VAR_NAME

   10 variable_assignment: INT VAR_NAME EQUAL_SIGN INT_VALUE
   11                    | DOUBLE VAR_NAME EQUAL_SIGN DOUBLE_VALUE
   12                    | CHAR VAR_NAME EQUAL_SIGN CHAR_VALUE
   13                    | BOOLEAN VAR_NAME EQUAL_SIGN BOOLEAN_VALUE
   14                    | STRING VAR_NAME EQUAL_SIGN STRING_VALUE

   15 variable_value: INT_VALUE
   16               | CHAR_VALUE
   17               | DOUBLE_VALUE
   18               | BOOLEAN_VALUE
   19               | STRING_VALUE

   20 variable_type: INT
   21              | DOUBLE
   22              | CHAR
   23              | BOOLEAN
   24              | STRING

   25 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

   26 member_access: VAR_NAME DOT VAR_NAME

   27 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT
   28          | function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

   29 function_visibility: PRIVATE
   30                    | PUBLIC

   31 arguments: ε
   32          | parameters

   33 parameters: variable_type VAR_NAME arguments_end

   34 arguments_end: ε
   35              | COMMA parameters

   36 inside_void_function: inside_brackets
   37                     | inside_brackets RETURN SEMICOLON

   38 inside_function: inside_brackets RETURN VAR_NAME SEMICOLON
   39                | inside_brackets RETURN variable_value SEMICOLON

   40 inside_brackets: ε
   41                | loops_n_condition inside_brackets

   42 loops_n_condition: for_statement
   43                  | switch
   44                  | do_while
   45                  | variable_initialization SEMICOLON
   46                  | variable_assignment SEMICOLON
   47                  | class_instance SEMICOLON
   48                  | member_access SEMICOLON

   49 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

   50 for_condition: for_variable SEMICOLON for_comparison SEMICOLON for_step

   51 for_variable: ε
   52             | variable_assignment

   53 for_comparison: ε
   54               | VAR_NAME CONDITION_SYMBOL comparison_value bool_operator

   55 comparison_value: INT_VALUE
   56                 | DOUBLE_VALUE
   57                 | CHAR_VALUE
   58                 | BOOLEAN_VALUE
   59                 | VAR_NAME

   60 bool_operator: ε
   61              | BOOL_SYMBOL for_comparison

   62 for_step: ε
   63         | VAR_NAME step

   64 step: INCREAMENT_DECREAMENT
   65     | LOOP_STEP step_value

   66 step_value: INT_VALUE
   67           | DOUBLE_VALUE

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

   69 do_condition: operand CONDITION_SYMBOL operand
   70             | BOOLEAN_VALUE

   71 operand: VAR_NAME
   72        | INT_VALUE
   73        | DOUBLE_VALUE
   74        | CHAR_VALUE
   75        | BOOLEAN_VALUE
   76        | VAR_NAME

   77 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

   78 case: CASE switch_value COLON switch_content case
   79     | ε

   80 switch_value: INT_VALUE
   81             | CHAR_VALUE

   82 switch_content: ε
   83               | BREAK

   84 default: DEFAULT COLON switch_content
   85        | ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CURLY_BRACKET_LEFT (258) 3 27 28 49 68 77
    CURLY_BRACKET_RIGHT (259) 3 27 28 49 68 77
    BRACKET_LEFT (260) 25 27 28 49 68 77
    BRACKET_RIGHT (261) 25 27 28 49 68 77
    EQUAL_SIGN (262) 10 11 12 13 14 25
    SEMICOLON (263) 7 8 37 38 39 45 46 47 48 50 68
    SINGLE_MARK (264)
    COLON (265) 78 84
    COMMA (266) 35
    DOT (267) 26
    PUBLIC <sval> (268) 3 30
    PRIVATE <sval> (269) 29
    CLASS (270) 3
    CLASS_NAME <sval> (271) 3 25
    NEW (272) 25
    FOR (273) 49
    DO (274) 68
    WHILE (275) 68
    CONDITION_SYMBOL (276) 54 69
    BOOL_SYMBOL (277) 61
    INCREAMENT_DECREAMENT (278) 64
    LOOP_STEP (279) 65
    SWITCH (280) 77
    CASE (281) 78
    DEFAULT (282) 84
    BREAK (283) 83
    RETURN (284) 37 38 39
    VAR_NAME <sval> (285) 9 10 11 12 13 14 25 26 27 28 33 38 54 59 63 71 76 77
    VOID (286) 27
    INT (287) 10 20
    CHAR (288) 12 22
    DOUBLE (289) 11 21
    BOOLEAN (290) 13 23
    STRING (291) 14 24
    INT_VALUE <ival> (292) 10 15 55 66 72 80
    CHAR_VALUE <cval> (293) 12 16 57 74 81
    DOUBLE_VALUE <dval> (294) 11 17 56 67 73
    BOOLEAN_VALUE <sval> (295) 13 18 58 70 75
    STRING_VALUE <sval> (296) 14 19


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    program (43)
        on left: 1 2
        on right: 0
    class_identifier (44)
        on left: 3
        on right: 2
    class_body (45)
        on left: 4 5 6
        on right: 3 5 6
    class_members (46)
        on left: 7 8
        on right: 6
    variable_initialization (47)
        on left: 9
        on right: 7 45
    variable_assignment (48)
        on left: 10 11 12 13 14
        on right: 8 46 52
    variable_value (49)
        on left: 15 16 17 18 19
        on right: 39
    variable_type (50)
        on left: 20 21 22 23 24
        on right: 9 28 33
    class_instance (51)
        on left: 25
        on right: 47
    member_access (52)
        on left: 26
        on right: 48
    functions (53)
        on left: 27 28
        on right: 5
    function_visibility (54)
        on left: 29 30
        on right: 27 28
    arguments (55)
        on left: 31 32
        on right: 27 28
    parameters (56)
        on left: 33
        on right: 32 35
    arguments_end (57)
        on left: 34 35
        on right: 33
    inside_void_function (58)
        on left: 36 37
        on right: 27
    inside_function (59)
        on left: 38 39
        on right: 28
    inside_brackets (60)
        on left: 40 41
        on right: 36 37 38 39 41 49 68
    loops_n_condition (61)
        on left: 42 43 44 45 46 47 48
        on right: 41
    for_statement (62)
        on left: 49
        on right: 42
    for_condition (63)
        on left: 50
        on right: 49
    for_variable (64)
        on left: 51 52
        on right: 50
    for_comparison (65)
        on left: 53 54
        on right: 50 61
    comparison_value (66)
        on left: 55 56 57 58 59
        on right: 54
    bool_operator (67)
        on left: 60 61
        on right: 54
    for_step (68)
        on left: 62 63
        on right: 50
    step (69)
        on left: 64 65
        on right: 63
    step_value (70)
        on left: 66 67
        on right: 65
    do_while (71)
        on left: 68
        on right: 44
    do_condition (72)
        on left: 69 70
        on right: 68
    operand (73)
        on left: 71 72 73 74 75 76
        on right: 69
    switch (74)
        on left: 77
        on right: 43
    case (75)
        on left: 78 79
        on right: 77 78
    switch_value (76)
        on left: 80 81
        on right: 78
    switch_content (77)
        on left: 82 83
        on right: 78 84
    default (78)
        on left: 84 85
        on right: 77


State 0

    0 $accept: • program $end

    PUBLIC  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program           go to state 2
    class_identifier  go to state 3


State 1

    3 class_identifier: PUBLIC • CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    CLASS  shift, and go to state 4


State 2

    0 $accept: program • $end

    $end  shift, and go to state 5


State 3

    2 program: class_identifier •

    $default  reduce using rule 2 (program)


State 4

    3 class_identifier: PUBLIC CLASS • CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 6


State 5

    0 $accept: program $end •

    $default  accept


State 6

    3 class_identifier: PUBLIC CLASS CLASS_NAME • CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 7


State 7

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT • class_body CURLY_BRACKET_RIGHT

    PUBLIC   shift, and go to state 8
    PRIVATE  shift, and go to state 9
    INT      shift, and go to state 10
    CHAR     shift, and go to state 11
    DOUBLE   shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    STRING   shift, and go to state 14

    $default  reduce using rule 4 (class_body)

    class_body               go to state 15
    class_members            go to state 16
    variable_initialization  go to state 17
    variable_assignment      go to state 18
    variable_type            go to state 19
    functions                go to state 20
    function_visibility      go to state 21


State 8

   30 function_visibility: PUBLIC •

    $default  reduce using rule 30 (function_visibility)


State 9

   29 function_visibility: PRIVATE •

    $default  reduce using rule 29 (function_visibility)


State 10

   10 variable_assignment: INT • VAR_NAME EQUAL_SIGN INT_VALUE
   20 variable_type: INT •

    VAR_NAME  shift, and go to state 22

    VAR_NAME  [reduce using rule 20 (variable_type)]


State 11

   12 variable_assignment: CHAR • VAR_NAME EQUAL_SIGN CHAR_VALUE
   22 variable_type: CHAR •

    VAR_NAME  shift, and go to state 23

    VAR_NAME  [reduce using rule 22 (variable_type)]


State 12

   11 variable_assignment: DOUBLE • VAR_NAME EQUAL_SIGN DOUBLE_VALUE
   21 variable_type: DOUBLE •

    VAR_NAME  shift, and go to state 24

    VAR_NAME  [reduce using rule 21 (variable_type)]


State 13

   13 variable_assignment: BOOLEAN • VAR_NAME EQUAL_SIGN BOOLEAN_VALUE
   23 variable_type: BOOLEAN •

    VAR_NAME  shift, and go to state 25

    VAR_NAME  [reduce using rule 23 (variable_type)]


State 14

   14 variable_assignment: STRING • VAR_NAME EQUAL_SIGN STRING_VALUE
   24 variable_type: STRING •

    VAR_NAME  shift, and go to state 26

    VAR_NAME  [reduce using rule 24 (variable_type)]


State 15

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 27


State 16

    6 class_body: class_members • class_body

    PUBLIC   shift, and go to state 8
    PRIVATE  shift, and go to state 9
    INT      shift, and go to state 10
    CHAR     shift, and go to state 11
    DOUBLE   shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    STRING   shift, and go to state 14

    $default  reduce using rule 4 (class_body)

    class_body               go to state 28
    class_members            go to state 16
    variable_initialization  go to state 17
    variable_assignment      go to state 18
    variable_type            go to state 19
    functions                go to state 20
    function_visibility      go to state 21


State 17

    7 class_members: variable_initialization • SEMICOLON

    SEMICOLON  shift, and go to state 29


State 18

    8 class_members: variable_assignment • SEMICOLON

    SEMICOLON  shift, and go to state 30


State 19

    9 variable_initialization: variable_type • VAR_NAME

    VAR_NAME  shift, and go to state 31


State 20

    5 class_body: functions • class_body

    PUBLIC   shift, and go to state 8
    PRIVATE  shift, and go to state 9
    INT      shift, and go to state 10
    CHAR     shift, and go to state 11
    DOUBLE   shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    STRING   shift, and go to state 14

    $default  reduce using rule 4 (class_body)

    class_body               go to state 32
    class_members            go to state 16
    variable_initialization  go to state 17
    variable_assignment      go to state 18
    variable_type            go to state 19
    functions                go to state 20
    function_visibility      go to state 21


State 21

   27 functions: function_visibility • VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT
   28          | function_visibility • variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    VOID     shift, and go to state 33
    INT      shift, and go to state 34
    CHAR     shift, and go to state 35
    DOUBLE   shift, and go to state 36
    BOOLEAN  shift, and go to state 37
    STRING   shift, and go to state 38

    variable_type  go to state 39


State 22

   10 variable_assignment: INT VAR_NAME • EQUAL_SIGN INT_VALUE

    EQUAL_SIGN  shift, and go to state 40


State 23

   12 variable_assignment: CHAR VAR_NAME • EQUAL_SIGN CHAR_VALUE

    EQUAL_SIGN  shift, and go to state 41


State 24

   11 variable_assignment: DOUBLE VAR_NAME • EQUAL_SIGN DOUBLE_VALUE

    EQUAL_SIGN  shift, and go to state 42


State 25

   13 variable_assignment: BOOLEAN VAR_NAME • EQUAL_SIGN BOOLEAN_VALUE

    EQUAL_SIGN  shift, and go to state 43


State 26

   14 variable_assignment: STRING VAR_NAME • EQUAL_SIGN STRING_VALUE

    EQUAL_SIGN  shift, and go to state 44


State 27

    3 class_identifier: PUBLIC CLASS CLASS_NAME CURLY_BRACKET_LEFT class_body CURLY_BRACKET_RIGHT •

    $default  reduce using rule 3 (class_identifier)


State 28

    6 class_body: class_members class_body •

    $default  reduce using rule 6 (class_body)


State 29

    7 class_members: variable_initialization SEMICOLON •

    $default  reduce using rule 7 (class_members)


State 30

    8 class_members: variable_assignment SEMICOLON •

    $default  reduce using rule 8 (class_members)


State 31

    9 variable_initialization: variable_type VAR_NAME •

    $default  reduce using rule 9 (variable_initialization)


State 32

    5 class_body: functions class_body •

    $default  reduce using rule 5 (class_body)


State 33

   27 functions: function_visibility VOID • VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    VAR_NAME  shift, and go to state 45


State 34

   20 variable_type: INT •

    $default  reduce using rule 20 (variable_type)


State 35

   22 variable_type: CHAR •

    $default  reduce using rule 22 (variable_type)


State 36

   21 variable_type: DOUBLE •

    $default  reduce using rule 21 (variable_type)


State 37

   23 variable_type: BOOLEAN •

    $default  reduce using rule 23 (variable_type)


State 38

   24 variable_type: STRING •

    $default  reduce using rule 24 (variable_type)


State 39

   28 functions: function_visibility variable_type • VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    VAR_NAME  shift, and go to state 46


State 40

   10 variable_assignment: INT VAR_NAME EQUAL_SIGN • INT_VALUE

    INT_VALUE  shift, and go to state 47


State 41

   12 variable_assignment: CHAR VAR_NAME EQUAL_SIGN • CHAR_VALUE

    CHAR_VALUE  shift, and go to state 48


State 42

   11 variable_assignment: DOUBLE VAR_NAME EQUAL_SIGN • DOUBLE_VALUE

    DOUBLE_VALUE  shift, and go to state 49


State 43

   13 variable_assignment: BOOLEAN VAR_NAME EQUAL_SIGN • BOOLEAN_VALUE

    BOOLEAN_VALUE  shift, and go to state 50


State 44

   14 variable_assignment: STRING VAR_NAME EQUAL_SIGN • STRING_VALUE

    STRING_VALUE  shift, and go to state 51


State 45

   27 functions: function_visibility VOID VAR_NAME • BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 52


State 46

   28 functions: function_visibility variable_type VAR_NAME • BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 53


State 47

   10 variable_assignment: INT VAR_NAME EQUAL_SIGN INT_VALUE •

    $default  reduce using rule 10 (variable_assignment)


State 48

   12 variable_assignment: CHAR VAR_NAME EQUAL_SIGN CHAR_VALUE •

    $default  reduce using rule 12 (variable_assignment)


State 49

   11 variable_assignment: DOUBLE VAR_NAME EQUAL_SIGN DOUBLE_VALUE •

    $default  reduce using rule 11 (variable_assignment)


State 50

   13 variable_assignment: BOOLEAN VAR_NAME EQUAL_SIGN BOOLEAN_VALUE •

    $default  reduce using rule 13 (variable_assignment)


State 51

   14 variable_assignment: STRING VAR_NAME EQUAL_SIGN STRING_VALUE •

    $default  reduce using rule 14 (variable_assignment)


State 52

   27 functions: function_visibility VOID VAR_NAME BRACKET_LEFT • arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    INT      shift, and go to state 34
    CHAR     shift, and go to state 35
    DOUBLE   shift, and go to state 36
    BOOLEAN  shift, and go to state 37
    STRING   shift, and go to state 38

    $default  reduce using rule 31 (arguments)

    variable_type  go to state 54
    arguments      go to state 55
    parameters     go to state 56


State 53

   28 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT • arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    INT      shift, and go to state 34
    CHAR     shift, and go to state 35
    DOUBLE   shift, and go to state 36
    BOOLEAN  shift, and go to state 37
    STRING   shift, and go to state 38

    $default  reduce using rule 31 (arguments)

    variable_type  go to state 54
    arguments      go to state 57
    parameters     go to state 56


State 54

   33 parameters: variable_type • VAR_NAME arguments_end

    VAR_NAME  shift, and go to state 58


State 55

   27 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 59


State 56

   32 arguments: parameters •

    $default  reduce using rule 32 (arguments)


State 57

   28 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 60


State 58

   33 parameters: variable_type VAR_NAME • arguments_end

    COMMA  shift, and go to state 61

    $default  reduce using rule 34 (arguments_end)

    arguments_end  go to state 62


State 59

   27 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 63


State 60

   28 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 64


State 61

   35 arguments_end: COMMA • parameters

    INT      shift, and go to state 34
    CHAR     shift, and go to state 35
    DOUBLE   shift, and go to state 36
    BOOLEAN  shift, and go to state 37
    STRING   shift, and go to state 38

    variable_type  go to state 54
    parameters     go to state 65


State 62

   33 parameters: variable_type VAR_NAME arguments_end •

    $default  reduce using rule 33 (parameters)


State 63

   27 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_void_function CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 66
    FOR         shift, and go to state 67
    DO          shift, and go to state 68
    SWITCH      shift, and go to state 69
    VAR_NAME    shift, and go to state 70
    INT         shift, and go to state 10
    CHAR        shift, and go to state 11
    DOUBLE      shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    STRING      shift, and go to state 14

    $default  reduce using rule 40 (inside_brackets)

    variable_initialization  go to state 71
    variable_assignment      go to state 72
    variable_type            go to state 19
    class_instance           go to state 73
    member_access            go to state 74
    inside_void_function     go to state 75
    inside_brackets          go to state 76
    loops_n_condition        go to state 77
    for_statement            go to state 78
    do_while                 go to state 79
    switch                   go to state 80


State 64

   28 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_function CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 66
    FOR         shift, and go to state 67
    DO          shift, and go to state 68
    SWITCH      shift, and go to state 69
    VAR_NAME    shift, and go to state 70
    INT         shift, and go to state 10
    CHAR        shift, and go to state 11
    DOUBLE      shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    STRING      shift, and go to state 14

    $default  reduce using rule 40 (inside_brackets)

    variable_initialization  go to state 71
    variable_assignment      go to state 72
    variable_type            go to state 19
    class_instance           go to state 73
    member_access            go to state 74
    inside_function          go to state 81
    inside_brackets          go to state 82
    loops_n_condition        go to state 77
    for_statement            go to state 78
    do_while                 go to state 79
    switch                   go to state 80


State 65

   35 arguments_end: COMMA parameters •

    $default  reduce using rule 35 (arguments_end)


State 66

   25 class_instance: CLASS_NAME • VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    VAR_NAME  shift, and go to state 83


State 67

   49 for_statement: FOR • BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 84


State 68

   68 do_while: DO • CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    CURLY_BRACKET_LEFT  shift, and go to state 85


State 69

   77 switch: SWITCH • BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 86


State 70

   26 member_access: VAR_NAME • DOT VAR_NAME

    DOT  shift, and go to state 87


State 71

   45 loops_n_condition: variable_initialization • SEMICOLON

    SEMICOLON  shift, and go to state 88


State 72

   46 loops_n_condition: variable_assignment • SEMICOLON

    SEMICOLON  shift, and go to state 89


State 73

   47 loops_n_condition: class_instance • SEMICOLON

    SEMICOLON  shift, and go to state 90


State 74

   48 loops_n_condition: member_access • SEMICOLON

    SEMICOLON  shift, and go to state 91


State 75

   27 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 92


State 76

   36 inside_void_function: inside_brackets •
   37                     | inside_brackets • RETURN SEMICOLON

    RETURN  shift, and go to state 93

    $default  reduce using rule 36 (inside_void_function)


State 77

   41 inside_brackets: loops_n_condition • inside_brackets

    CLASS_NAME  shift, and go to state 66
    FOR         shift, and go to state 67
    DO          shift, and go to state 68
    SWITCH      shift, and go to state 69
    VAR_NAME    shift, and go to state 70
    INT         shift, and go to state 10
    CHAR        shift, and go to state 11
    DOUBLE      shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    STRING      shift, and go to state 14

    $default  reduce using rule 40 (inside_brackets)

    variable_initialization  go to state 71
    variable_assignment      go to state 72
    variable_type            go to state 19
    class_instance           go to state 73
    member_access            go to state 74
    inside_brackets          go to state 94
    loops_n_condition        go to state 77
    for_statement            go to state 78
    do_while                 go to state 79
    switch                   go to state 80


State 78

   42 loops_n_condition: for_statement •

    $default  reduce using rule 42 (loops_n_condition)


State 79

   44 loops_n_condition: do_while •

    $default  reduce using rule 44 (loops_n_condition)


State 80

   43 loops_n_condition: switch •

    $default  reduce using rule 43 (loops_n_condition)


State 81

   28 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 95


State 82

   38 inside_function: inside_brackets • RETURN VAR_NAME SEMICOLON
   39                | inside_brackets • RETURN variable_value SEMICOLON

    RETURN  shift, and go to state 96


State 83

   25 class_instance: CLASS_NAME VAR_NAME • EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    EQUAL_SIGN  shift, and go to state 97


State 84

   49 for_statement: FOR BRACKET_LEFT • for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    INT      shift, and go to state 98
    CHAR     shift, and go to state 99
    DOUBLE   shift, and go to state 100
    BOOLEAN  shift, and go to state 101
    STRING   shift, and go to state 102

    $default  reduce using rule 51 (for_variable)

    variable_assignment  go to state 103
    for_condition        go to state 104
    for_variable         go to state 105


State 85

   68 do_while: DO CURLY_BRACKET_LEFT • inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    CLASS_NAME  shift, and go to state 66
    FOR         shift, and go to state 67
    DO          shift, and go to state 68
    SWITCH      shift, and go to state 69
    VAR_NAME    shift, and go to state 70
    INT         shift, and go to state 10
    CHAR        shift, and go to state 11
    DOUBLE      shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    STRING      shift, and go to state 14

    $default  reduce using rule 40 (inside_brackets)

    variable_initialization  go to state 71
    variable_assignment      go to state 72
    variable_type            go to state 19
    class_instance           go to state 73
    member_access            go to state 74
    inside_brackets          go to state 106
    loops_n_condition        go to state 77
    for_statement            go to state 78
    do_while                 go to state 79
    switch                   go to state 80


State 86

   77 switch: SWITCH BRACKET_LEFT • VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    VAR_NAME  shift, and go to state 107


State 87

   26 member_access: VAR_NAME DOT • VAR_NAME

    VAR_NAME  shift, and go to state 108


State 88

   45 loops_n_condition: variable_initialization SEMICOLON •

    $default  reduce using rule 45 (loops_n_condition)


State 89

   46 loops_n_condition: variable_assignment SEMICOLON •

    $default  reduce using rule 46 (loops_n_condition)


State 90

   47 loops_n_condition: class_instance SEMICOLON •

    $default  reduce using rule 47 (loops_n_condition)


State 91

   48 loops_n_condition: member_access SEMICOLON •

    $default  reduce using rule 48 (loops_n_condition)


State 92

   27 functions: function_visibility VOID VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_void_function CURLY_BRACKET_RIGHT •

    $default  reduce using rule 27 (functions)


State 93

   37 inside_void_function: inside_brackets RETURN • SEMICOLON

    SEMICOLON  shift, and go to state 109


State 94

   41 inside_brackets: loops_n_condition inside_brackets •

    $default  reduce using rule 41 (inside_brackets)


State 95

   28 functions: function_visibility variable_type VAR_NAME BRACKET_LEFT arguments BRACKET_RIGHT CURLY_BRACKET_LEFT inside_function CURLY_BRACKET_RIGHT •

    $default  reduce using rule 28 (functions)


State 96

   38 inside_function: inside_brackets RETURN • VAR_NAME SEMICOLON
   39                | inside_brackets RETURN • variable_value SEMICOLON

    VAR_NAME       shift, and go to state 110
    INT_VALUE      shift, and go to state 111
    CHAR_VALUE     shift, and go to state 112
    DOUBLE_VALUE   shift, and go to state 113
    BOOLEAN_VALUE  shift, and go to state 114
    STRING_VALUE   shift, and go to state 115

    variable_value  go to state 116


State 97

   25 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN • NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    NEW  shift, and go to state 117


State 98

   10 variable_assignment: INT • VAR_NAME EQUAL_SIGN INT_VALUE

    VAR_NAME  shift, and go to state 22


State 99

   12 variable_assignment: CHAR • VAR_NAME EQUAL_SIGN CHAR_VALUE

    VAR_NAME  shift, and go to state 23


State 100

   11 variable_assignment: DOUBLE • VAR_NAME EQUAL_SIGN DOUBLE_VALUE

    VAR_NAME  shift, and go to state 24


State 101

   13 variable_assignment: BOOLEAN • VAR_NAME EQUAL_SIGN BOOLEAN_VALUE

    VAR_NAME  shift, and go to state 25


State 102

   14 variable_assignment: STRING • VAR_NAME EQUAL_SIGN STRING_VALUE

    VAR_NAME  shift, and go to state 26


State 103

   52 for_variable: variable_assignment •

    $default  reduce using rule 52 (for_variable)


State 104

   49 for_statement: FOR BRACKET_LEFT for_condition • BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 118


State 105

   50 for_condition: for_variable • SEMICOLON for_comparison SEMICOLON for_step

    SEMICOLON  shift, and go to state 119


State 106

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets • CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    CURLY_BRACKET_RIGHT  shift, and go to state 120


State 107

   77 switch: SWITCH BRACKET_LEFT VAR_NAME • BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 121


State 108

   26 member_access: VAR_NAME DOT VAR_NAME •

    $default  reduce using rule 26 (member_access)


State 109

   37 inside_void_function: inside_brackets RETURN SEMICOLON •

    $default  reduce using rule 37 (inside_void_function)


State 110

   38 inside_function: inside_brackets RETURN VAR_NAME • SEMICOLON

    SEMICOLON  shift, and go to state 122


State 111

   15 variable_value: INT_VALUE •

    $default  reduce using rule 15 (variable_value)


State 112

   16 variable_value: CHAR_VALUE •

    $default  reduce using rule 16 (variable_value)


State 113

   17 variable_value: DOUBLE_VALUE •

    $default  reduce using rule 17 (variable_value)


State 114

   18 variable_value: BOOLEAN_VALUE •

    $default  reduce using rule 18 (variable_value)


State 115

   19 variable_value: STRING_VALUE •

    $default  reduce using rule 19 (variable_value)


State 116

   39 inside_function: inside_brackets RETURN variable_value • SEMICOLON

    SEMICOLON  shift, and go to state 123


State 117

   25 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW • CLASS_NAME BRACKET_LEFT BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 124


State 118

   49 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT • CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 125


State 119

   50 for_condition: for_variable SEMICOLON • for_comparison SEMICOLON for_step

    VAR_NAME  shift, and go to state 126

    $default  reduce using rule 53 (for_comparison)

    for_comparison  go to state 127


State 120

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT • WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    WHILE  shift, and go to state 128


State 121

   77 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT • CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT

    CURLY_BRACKET_LEFT  shift, and go to state 129


State 122

   38 inside_function: inside_brackets RETURN VAR_NAME SEMICOLON •

    $default  reduce using rule 38 (inside_function)


State 123

   39 inside_function: inside_brackets RETURN variable_value SEMICOLON •

    $default  reduce using rule 39 (inside_function)


State 124

   25 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME • BRACKET_LEFT BRACKET_RIGHT

    BRACKET_LEFT  shift, and go to state 130


State 125

   49 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT • inside_brackets CURLY_BRACKET_RIGHT

    CLASS_NAME  shift, and go to state 66
    FOR         shift, and go to state 67
    DO          shift, and go to state 68
    SWITCH      shift, and go to state 69
    VAR_NAME    shift, and go to state 70
    INT         shift, and go to state 10
    CHAR        shift, and go to state 11
    DOUBLE      shift, and go to state 12
    BOOLEAN     shift, and go to state 13
    STRING      shift, and go to state 14

    $default  reduce using rule 40 (inside_brackets)

    variable_initialization  go to state 71
    variable_assignment      go to state 72
    variable_type            go to state 19
    class_instance           go to state 73
    member_access            go to state 74
    inside_brackets          go to state 131
    loops_n_condition        go to state 77
    for_statement            go to state 78
    do_while                 go to state 79
    switch                   go to state 80


State 126

   54 for_comparison: VAR_NAME • CONDITION_SYMBOL comparison_value bool_operator

    CONDITION_SYMBOL  shift, and go to state 132


State 127

   50 for_condition: for_variable SEMICOLON for_comparison • SEMICOLON for_step

    SEMICOLON  shift, and go to state 133


State 128

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE • BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON

    BRACKET_LEFT  shift, and go to state 134


State 129

   77 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT • case default CURLY_BRACKET_RIGHT

    CASE  shift, and go to state 135

    $default  reduce using rule 79 (case)

    case  go to state 136


State 130

   25 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT • BRACKET_RIGHT

    BRACKET_RIGHT  shift, and go to state 137


State 131

   49 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 138


State 132

   54 for_comparison: VAR_NAME CONDITION_SYMBOL • comparison_value bool_operator

    VAR_NAME       shift, and go to state 139
    INT_VALUE      shift, and go to state 140
    CHAR_VALUE     shift, and go to state 141
    DOUBLE_VALUE   shift, and go to state 142
    BOOLEAN_VALUE  shift, and go to state 143

    comparison_value  go to state 144


State 133

   50 for_condition: for_variable SEMICOLON for_comparison SEMICOLON • for_step

    VAR_NAME  shift, and go to state 145

    $default  reduce using rule 62 (for_step)

    for_step  go to state 146


State 134

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT • do_condition BRACKET_RIGHT SEMICOLON

    VAR_NAME       shift, and go to state 147
    INT_VALUE      shift, and go to state 148
    CHAR_VALUE     shift, and go to state 149
    DOUBLE_VALUE   shift, and go to state 150
    BOOLEAN_VALUE  shift, and go to state 151

    do_condition  go to state 152
    operand       go to state 153


State 135

   78 case: CASE • switch_value COLON switch_content case

    INT_VALUE   shift, and go to state 154
    CHAR_VALUE  shift, and go to state 155

    switch_value  go to state 156


State 136

   77 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case • default CURLY_BRACKET_RIGHT

    DEFAULT  shift, and go to state 157

    $default  reduce using rule 85 (default)

    default  go to state 158


State 137

   25 class_instance: CLASS_NAME VAR_NAME EQUAL_SIGN NEW CLASS_NAME BRACKET_LEFT BRACKET_RIGHT •

    $default  reduce using rule 25 (class_instance)


State 138

   49 for_statement: FOR BRACKET_LEFT for_condition BRACKET_RIGHT CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT •

    $default  reduce using rule 49 (for_statement)


State 139

   59 comparison_value: VAR_NAME •

    $default  reduce using rule 59 (comparison_value)


State 140

   55 comparison_value: INT_VALUE •

    $default  reduce using rule 55 (comparison_value)


State 141

   57 comparison_value: CHAR_VALUE •

    $default  reduce using rule 57 (comparison_value)


State 142

   56 comparison_value: DOUBLE_VALUE •

    $default  reduce using rule 56 (comparison_value)


State 143

   58 comparison_value: BOOLEAN_VALUE •

    $default  reduce using rule 58 (comparison_value)


State 144

   54 for_comparison: VAR_NAME CONDITION_SYMBOL comparison_value • bool_operator

    BOOL_SYMBOL  shift, and go to state 159

    $default  reduce using rule 60 (bool_operator)

    bool_operator  go to state 160


State 145

   63 for_step: VAR_NAME • step

    INCREAMENT_DECREAMENT  shift, and go to state 161
    LOOP_STEP              shift, and go to state 162

    step  go to state 163


State 146

   50 for_condition: for_variable SEMICOLON for_comparison SEMICOLON for_step •

    $default  reduce using rule 50 (for_condition)


State 147

   71 operand: VAR_NAME •
   76        | VAR_NAME •

    BRACKET_RIGHT     reduce using rule 71 (operand)
    BRACKET_RIGHT     [reduce using rule 76 (operand)]
    CONDITION_SYMBOL  reduce using rule 71 (operand)
    CONDITION_SYMBOL  [reduce using rule 76 (operand)]
    $default          reduce using rule 71 (operand)


State 148

   72 operand: INT_VALUE •

    $default  reduce using rule 72 (operand)


State 149

   74 operand: CHAR_VALUE •

    $default  reduce using rule 74 (operand)


State 150

   73 operand: DOUBLE_VALUE •

    $default  reduce using rule 73 (operand)


State 151

   70 do_condition: BOOLEAN_VALUE •
   75 operand: BOOLEAN_VALUE •

    CONDITION_SYMBOL  reduce using rule 75 (operand)
    $default          reduce using rule 70 (do_condition)


State 152

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition • BRACKET_RIGHT SEMICOLON

    BRACKET_RIGHT  shift, and go to state 164


State 153

   69 do_condition: operand • CONDITION_SYMBOL operand

    CONDITION_SYMBOL  shift, and go to state 165


State 154

   80 switch_value: INT_VALUE •

    $default  reduce using rule 80 (switch_value)


State 155

   81 switch_value: CHAR_VALUE •

    $default  reduce using rule 81 (switch_value)


State 156

   78 case: CASE switch_value • COLON switch_content case

    COLON  shift, and go to state 166


State 157

   84 default: DEFAULT • COLON switch_content

    COLON  shift, and go to state 167


State 158

   77 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default • CURLY_BRACKET_RIGHT

    CURLY_BRACKET_RIGHT  shift, and go to state 168


State 159

   61 bool_operator: BOOL_SYMBOL • for_comparison

    VAR_NAME  shift, and go to state 126

    $default  reduce using rule 53 (for_comparison)

    for_comparison  go to state 169


State 160

   54 for_comparison: VAR_NAME CONDITION_SYMBOL comparison_value bool_operator •

    $default  reduce using rule 54 (for_comparison)


State 161

   64 step: INCREAMENT_DECREAMENT •

    $default  reduce using rule 64 (step)


State 162

   65 step: LOOP_STEP • step_value

    INT_VALUE     shift, and go to state 170
    DOUBLE_VALUE  shift, and go to state 171

    step_value  go to state 172


State 163

   63 for_step: VAR_NAME step •

    $default  reduce using rule 63 (for_step)


State 164

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT • SEMICOLON

    SEMICOLON  shift, and go to state 173


State 165

   69 do_condition: operand CONDITION_SYMBOL • operand

    VAR_NAME       shift, and go to state 147
    INT_VALUE      shift, and go to state 148
    CHAR_VALUE     shift, and go to state 149
    DOUBLE_VALUE   shift, and go to state 150
    BOOLEAN_VALUE  shift, and go to state 174

    operand  go to state 175


State 166

   78 case: CASE switch_value COLON • switch_content case

    BREAK  shift, and go to state 176

    $default  reduce using rule 82 (switch_content)

    switch_content  go to state 177


State 167

   84 default: DEFAULT COLON • switch_content

    BREAK  shift, and go to state 176

    $default  reduce using rule 82 (switch_content)

    switch_content  go to state 178


State 168

   77 switch: SWITCH BRACKET_LEFT VAR_NAME BRACKET_RIGHT CURLY_BRACKET_LEFT case default CURLY_BRACKET_RIGHT •

    $default  reduce using rule 77 (switch)


State 169

   61 bool_operator: BOOL_SYMBOL for_comparison •

    $default  reduce using rule 61 (bool_operator)


State 170

   66 step_value: INT_VALUE •

    $default  reduce using rule 66 (step_value)


State 171

   67 step_value: DOUBLE_VALUE •

    $default  reduce using rule 67 (step_value)


State 172

   65 step: LOOP_STEP step_value •

    $default  reduce using rule 65 (step)


State 173

   68 do_while: DO CURLY_BRACKET_LEFT inside_brackets CURLY_BRACKET_RIGHT WHILE BRACKET_LEFT do_condition BRACKET_RIGHT SEMICOLON •

    $default  reduce using rule 68 (do_while)


State 174

   75 operand: BOOLEAN_VALUE •

    $default  reduce using rule 75 (operand)


State 175

   69 do_condition: operand CONDITION_SYMBOL operand •

    $default  reduce using rule 69 (do_condition)


State 176

   83 switch_content: BREAK •

    $default  reduce using rule 83 (switch_content)


State 177

   78 case: CASE switch_value COLON switch_content • case

    CASE  shift, and go to state 135

    $default  reduce using rule 79 (case)

    case  go to state 179


State 178

   84 default: DEFAULT COLON switch_content •

    $default  reduce using rule 84 (default)


State 179

   78 case: CASE switch_value COLON switch_content case •

    $default  reduce using rule 78 (case)
